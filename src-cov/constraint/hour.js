/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['constraint/hour.js']) {
  _$jscoverage['constraint/hour.js'] = [];
  _$jscoverage['constraint/hour.js'][11] = 0;
  _$jscoverage['constraint/hour.js'][30] = 0;
  _$jscoverage['constraint/hour.js'][40] = 0;
  _$jscoverage['constraint/hour.js'][47] = 0;
  _$jscoverage['constraint/hour.js'][56] = 0;
  _$jscoverage['constraint/hour.js'][66] = 0;
  _$jscoverage['constraint/hour.js'][77] = 0;
  _$jscoverage['constraint/hour.js'][79] = 0;
  _$jscoverage['constraint/hour.js'][86] = 0;
  _$jscoverage['constraint/hour.js'][87] = 0;
  _$jscoverage['constraint/hour.js'][94] = 0;
  _$jscoverage['constraint/hour.js'][104] = 0;
  _$jscoverage['constraint/hour.js'][106] = 0;
}
_$jscoverage['constraint/hour.js'].source = ["/**","* Hour Constraint (H)","* (c) 2013 Bill, BunKat LLC.","*","* Definition for a hour constraint type.","*","* Later is freely distributable under the MIT license.","* For all details and documentation:","*     http://github.com/bunkat/later","*/","later.hour = later.h = {","","  /**","  * The name of this constraint.","  */","  name: 'hour',","","  /**","  * The rough amount of seconds between start and end for this constraint.","  * (doesn't need to be exact)","  */","  range: 3600,","","  /**","  * The hour value of the specified date.","  *","  * @param {Date} d: The date to calculate the value of","  */","  val: function(d) {","    return d.h || (d.h = later.date.getHour.call(d));","  },","","  /**","  * Returns true if the val is valid for the date specified.","  *","  * @param {Date} d: The date to check the value on","  * @param {Integer} val: The value to validate","  */","  isValid: function(d, val) {","    return later.h.val(d) === val;","  },","","  /**","  * The minimum and maximum valid hour values.","  */","  extent: function() {","    return [0, 23];","  },","","  /**","  * The start of the hour of the specified date.","  *","  * @param {Date} d: The specified date","  */","  start: function(d) {","    return d.hStart || (d.hStart = later.date.next(","      later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));","  },","","  /**","  * The end of the hour of the specified date.","  *","  * @param {Date} d: The specified date","  */","  end: function(d) {","    return d.hEnd || (d.hEnd = later.date.prev(","      later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));","  },","","  /**","  * Returns the start of the next instance of the hour value indicated.","  *","  * @param {Date} d: The starting date","  * @param {int} val: The desired value, must be within extent","  */","  next: function(d, val) {","    val = val &gt; 23 ? 0 : val;","","    var next = later.date.next(","      later.Y.val(d),","      later.M.val(d),","      later.D.val(d) + (val &lt;= later.h.val(d) ? 1 : 0),","      val);","","    // correct for passing over a daylight savings boundry","    if(!later.date.isUTC &amp;&amp; next.getTime() &lt;= d.getTime()) {","      next = later.date.next(","        later.Y.val(next),","        later.M.val(next),","        later.D.val(next),","        val + 1);","    }","","    return next;","  },","","  /**","  * Returns the end of the previous instance of the hour value indicated.","  *","  * @param {Date} d: The starting date","  * @param {int} val: The desired value, must be within extent","  */","  prev: function(d, val) {","    val = val &gt; 23 ? 23 : val;","","    return later.date.prev(","      later.Y.val(d),","      later.M.val(d),","      later.D.val(d) + (val &gt;= later.h.val(d) ? -1 : 0),","      val);","  }","","};"];
_$jscoverage['constraint/hour.js'][11]++;
later.hour = (later.h = {name: "hour", range: 3600, val: (function (d) {
  _$jscoverage['constraint/hour.js'][30]++;
  return (d.h || (d.h = later.date.getHour.call(d)));
}), isValid: (function (d, val) {
  _$jscoverage['constraint/hour.js'][40]++;
  return (later.h.val(d) === val);
}), extent: (function () {
  _$jscoverage['constraint/hour.js'][47]++;
  return [0, 23];
}), start: (function (d) {
  _$jscoverage['constraint/hour.js'][56]++;
  return (d.hStart || (d.hStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d))));
}), end: (function (d) {
  _$jscoverage['constraint/hour.js'][66]++;
  return (d.hEnd || (d.hEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d))));
}), next: (function (d, val) {
  _$jscoverage['constraint/hour.js'][77]++;
  val = ((val > 23)? 0: val);
  _$jscoverage['constraint/hour.js'][79]++;
  var next = later.date.next(later.Y.val(d), later.M.val(d), (later.D.val(d) + ((val <= later.h.val(d))? 1: 0)), val);
  _$jscoverage['constraint/hour.js'][86]++;
  if (((! later.date.isUTC) && (next.getTime() <= d.getTime()))) {
    _$jscoverage['constraint/hour.js'][87]++;
    next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), (val + 1));
  }
  _$jscoverage['constraint/hour.js'][94]++;
  return next;
}), prev: (function (d, val) {
  _$jscoverage['constraint/hour.js'][104]++;
  val = ((val > 23)? 23: val);
  _$jscoverage['constraint/hour.js'][106]++;
  return later.date.prev(later.Y.val(d), later.M.val(d), (later.D.val(d) + ((val >= later.h.val(d))? -1: 0)), val);
})});
