/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['constraint/dayofyear.js']) {
  _$jscoverage['constraint/dayofyear.js'] = [];
  _$jscoverage['constraint/dayofyear.js'][11] = 0;
  _$jscoverage['constraint/dayofyear.js'][30] = 0;
  _$jscoverage['constraint/dayofyear.js'][41] = 0;
  _$jscoverage['constraint/dayofyear.js'][45] = 0;
  _$jscoverage['constraint/dayofyear.js'][54] = 0;
  _$jscoverage['constraint/dayofyear.js'][63] = 0;
  _$jscoverage['constraint/dayofyear.js'][73] = 0;
  _$jscoverage['constraint/dayofyear.js'][76] = 0;
  _$jscoverage['constraint/dayofyear.js'][78] = 0;
  _$jscoverage['constraint/dayofyear.js'][93] = 0;
  _$jscoverage['constraint/dayofyear.js'][96] = 0;
  _$jscoverage['constraint/dayofyear.js'][98] = 0;
}
_$jscoverage['constraint/dayofyear.js'].source = ["/**","* Day of Year Constraint (dy)","* (c) 2013 Bill, BunKat LLC.","*","* Definition for a day of year constraint type.","*","* Later is freely distributable under the MIT license.","* For all details and documentation:","*     http://github.com/bunkat/later","*/","later.dayOfYear = later.dy = {","","  /**","  * The name of this constraint.","  */","  name: 'day of year',","","  /**","  * The rough amount of seconds between start and end for this constraint.","  * (doesn't need to be exact)","  */","  range: 86400,","","  /**","  * The day of year value of the specified date.","  *","  * @param {Date} d: The date to calculate the value of","  */","  val: function(d) {","    return d.dy || (d.dy =","      Math.ceil(1 + (later.D.start(d).getTime() - later.Y.start(d).getTime()) / later.DAY));","  },","","  /**","  * The minimum and maximum valid day of year values of the month specified.","  * Zero indicates the last day of the year.","  *","  * @param {Date} d: The date indicating the month to find the extent of","  */","  extent: function(d) {","    var year = later.Y.val(d);","","    // shortcut on finding leap years since this function gets called a lot","    // works between 1901 and 2099","    return d.dyExtent || (d.dyExtent = [1, year % 4 ? 365 : 366]);","  },","","  /**","  * The start of the day of year of the specified date.","  *","  * @param {Date} d: The specified date","  */","  start: function(d) {","    return later.D.start(d);","  },","","  /**","  * The end of the day of year of the specified date.","  *","  * @param {Date} d: The specified date","  */","  end: function(d) {","    return later.D.end(d);","  },","","  /**","  * Returns the start of the next instance of the day of year value indicated.","  *","  * @param {Date} d: The starting date","  * @param {int} val: The desired value, must be within extent","  */","  next: function(d, val) {","    var year = later.date.nextRollover(d, val, later.dy, later.Y),","        dyMax = later.dy.extent(year)[1];","","    val = val &gt; dyMax ? 1 : val || dyMax;","","    return later.date.next(","      later.Y.val(year),","      later.M.val(year),","      val","    );","","  },","","  /**","  * Returns the end of the previous instance of the day of year value indicated.","  *","  * @param {Date} d: The starting date","  * @param {int} val: The desired value, must be within extent","  */","  prev: function(d, val) {","    var year = later.date.prevRollover(d, val, later.dy, later.Y),","        dyMax = later.dy.extent(year)[1];","","    val = val &gt; dyMax ? dyMax : val || dyMax;","","    return later.date.prev(","      later.Y.val(year),","      later.M.val(year),","      val","    );","  }","","};"];
_$jscoverage['constraint/dayofyear.js'][11]++;
later.dayOfYear = (later.dy = {name: "day of year", range: 86400, val: (function (d) {
  _$jscoverage['constraint/dayofyear.js'][30]++;
  return (d.dy || (d.dy = Math.ceil((1 + ((later.D.start(d).getTime() - later.Y.start(d).getTime()) / later.DAY)))));
}), extent: (function (d) {
  _$jscoverage['constraint/dayofyear.js'][41]++;
  var year = later.Y.val(d);
  _$jscoverage['constraint/dayofyear.js'][45]++;
  return (d.dyExtent || (d.dyExtent = [1, ((year % 4)? 365: 366)]));
}), start: (function (d) {
  _$jscoverage['constraint/dayofyear.js'][54]++;
  return later.D.start(d);
}), end: (function (d) {
  _$jscoverage['constraint/dayofyear.js'][63]++;
  return later.D.end(d);
}), next: (function (d, val) {
  _$jscoverage['constraint/dayofyear.js'][73]++;
  var year = later.date.nextRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];
  _$jscoverage['constraint/dayofyear.js'][76]++;
  val = ((val > dyMax)? 1: (val || dyMax));
  _$jscoverage['constraint/dayofyear.js'][78]++;
  return later.date.next(later.Y.val(year), later.M.val(year), val);
}), prev: (function (d, val) {
  _$jscoverage['constraint/dayofyear.js'][93]++;
  var year = later.date.prevRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];
  _$jscoverage['constraint/dayofyear.js'][96]++;
  val = ((val > dyMax)? dyMax: (val || dyMax));
  _$jscoverage['constraint/dayofyear.js'][98]++;
  return later.date.prev(later.Y.val(year), later.M.val(year), val);
})});
