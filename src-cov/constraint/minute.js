/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['constraint/minute.js']) {
  _$jscoverage['constraint/minute.js'] = [];
  _$jscoverage['constraint/minute.js'][11] = 0;
  _$jscoverage['constraint/minute.js'][30] = 0;
  _$jscoverage['constraint/minute.js'][37] = 0;
  _$jscoverage['constraint/minute.js'][46] = 0;
  _$jscoverage['constraint/minute.js'][56] = 0;
  _$jscoverage['constraint/minute.js'][67] = 0;
  _$jscoverage['constraint/minute.js'][75] = 0;
  _$jscoverage['constraint/minute.js'][76] = 0;
  _$jscoverage['constraint/minute.js'][84] = 0;
  _$jscoverage['constraint/minute.js'][94] = 0;
}
_$jscoverage['constraint/minute.js'].source = ["/**","* Minute Constraint (m)","* (c) 2013 Bill, BunKat LLC.","*","* Definition for a minute constraint type.","*","* Later is freely distributable under the MIT license.","* For all details and documentation:","*     http://github.com/bunkat/later","*/","later.minute = later.m = {","","  /**","  * The name of this constraint.","  */","  name: 'minute',","","  /**","  * The rough amount of seconds between start and end for this constraint.","  * (doesn't need to be exact)","  */","  range: 60,","","  /**","  * The minute value of the specified date.","  *","  * @param {Date} d: The date to calculate the value of","  */","  val: function(d) {","    return d.m || (d.m = later.date.getMin.call(d));","  },","","  /**","  * The minimum and maximum valid minute values.","  */","  extent: function(d) {","    return [0, 59];","  },","","  /**","  * The start of the minute of the specified date.","  *","  * @param {Date} d: The specified date","  */","  start: function(d) {","    return d.mStart || (d.mStart = later.date.next(","      later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));","  },","","  /**","  * The end of the minute of the specified date.","  *","  * @param {Date} d: The specified date","  */","  end: function(d) {","    return d.mEnd || (d.mEnd = later.date.prev(","      later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));","  },","","  /**","  * Returns the start of the next instance of the minute value indicated.","  *","  * @param {Date} d: The starting date","  * @param {int} val: The desired value, must be within extent","  */","  next: function(d, val) {","    var next = later.date.next(","      later.Y.val(d),","      later.M.val(d),","      later.D.val(d),","      later.h.val(d) + (val &lt;= later.m.val(d) ? 1 : 0),","      val);","","    // correct for passing over a daylight savings boundry","    if(!later.date.isUTC &amp;&amp; next.getTime() &lt;= d.getTime()) {","      next = later.date.next(","        later.Y.val(next),","        later.M.val(next),","        later.D.val(next),","        later.h.val(next),","        val + 120);","    }","","    return next;","  },","","  /**","  * Returns the end of the previous instance of the minute value indicated.","  *","  * @param {Date} d: The starting date","  * @param {int} val: The desired value, must be within extent","  */","  prev: function(d, val) {","    return later.date.prev(","      later.Y.val(d),","      later.M.val(d),","      later.D.val(d),","      later.h.val(d) + (val &gt;= later.m.val(d) ? -1 : 0),","      val);","  }","","};"];
_$jscoverage['constraint/minute.js'][11]++;
later.minute = (later.m = {name: "minute", range: 60, val: (function (d) {
  _$jscoverage['constraint/minute.js'][30]++;
  return (d.m || (d.m = later.date.getMin.call(d)));
}), extent: (function (d) {
  _$jscoverage['constraint/minute.js'][37]++;
  return [0, 59];
}), start: (function (d) {
  _$jscoverage['constraint/minute.js'][46]++;
  return (d.mStart || (d.mStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d))));
}), end: (function (d) {
  _$jscoverage['constraint/minute.js'][56]++;
  return (d.mEnd || (d.mEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d))));
}), next: (function (d, val) {
  _$jscoverage['constraint/minute.js'][67]++;
  var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), (later.h.val(d) + ((val <= later.m.val(d))? 1: 0)), val);
  _$jscoverage['constraint/minute.js'][75]++;
  if (((! later.date.isUTC) && (next.getTime() <= d.getTime()))) {
    _$jscoverage['constraint/minute.js'][76]++;
    next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), later.h.val(next), (val + 120));
  }
  _$jscoverage['constraint/minute.js'][84]++;
  return next;
}), prev: (function (d, val) {
  _$jscoverage['constraint/minute.js'][94]++;
  return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), (later.h.val(d) + ((val >= later.m.val(d))? -1: 0)), val);
})});
