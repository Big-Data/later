/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['constraint/weekofyear.js']) {
  _$jscoverage['constraint/weekofyear.js'] = [];
  _$jscoverage['constraint/weekofyear.js'][12] = 0;
  _$jscoverage['constraint/weekofyear.js'][31] = 0;
  _$jscoverage['constraint/weekofyear.js'][34] = 0;
  _$jscoverage['constraint/weekofyear.js'][38] = 0;
  _$jscoverage['constraint/weekofyear.js'][48] = 0;
  _$jscoverage['constraint/weekofyear.js'][57] = 0;
  _$jscoverage['constraint/weekofyear.js'][60] = 0;
  _$jscoverage['constraint/weekofyear.js'][64] = 0;
  _$jscoverage['constraint/weekofyear.js'][73] = 0;
  _$jscoverage['constraint/weekofyear.js'][87] = 0;
  _$jscoverage['constraint/weekofyear.js'][102] = 0;
  _$jscoverage['constraint/weekofyear.js'][104] = 0;
  _$jscoverage['constraint/weekofyear.js'][108] = 0;
  _$jscoverage['constraint/weekofyear.js'][109] = 0;
  _$jscoverage['constraint/weekofyear.js'][112] = 0;
  _$jscoverage['constraint/weekofyear.js'][115] = 0;
  _$jscoverage['constraint/weekofyear.js'][117] = 0;
  _$jscoverage['constraint/weekofyear.js'][131] = 0;
  _$jscoverage['constraint/weekofyear.js'][135] = 0;
  _$jscoverage['constraint/weekofyear.js'][136] = 0;
  _$jscoverage['constraint/weekofyear.js'][139] = 0;
  _$jscoverage['constraint/weekofyear.js'][142] = 0;
  _$jscoverage['constraint/weekofyear.js'][144] = 0;
}
_$jscoverage['constraint/weekofyear.js'].source = ["/**","* Week of Year Constraint (wy)","* (c) 2013 Bill, BunKat LLC.","*","* Definition for an ISO 8601 week constraint type. For more information about","* ISO 8601 see http://en.wikipedia.org/wiki/ISO_week_date.","*","* Later is freely distributable under the MIT license.","* For all details and documentation:","*     http://github.com/bunkat/later","*/","later.weekOfYear = later.wy = {","","  /**","  * The name of this constraint.","  */","  name: 'week of year (ISO)',","","  /**","  * The rough amount of seconds between start and end for this constraint.","  * (doesn't need to be exact)","  */","  range: 604800,","","  /**","  * The ISO week year value of the specified date.","  *","  * @param {Date} d: The date to calculate the value of","  */","  val: function(d) {","    if (d.wy) return d.wy;","","    // move to the Thursday in the target week and find Thurs of target year","    var wThur = later.dw.next(later.wy.start(d), 5),","        YThur = later.dw.next(later.Y.prev(wThur, later.Y.val(wThur)-1), 5);","","    // caculate the difference between the two dates in weeks","    return (d.wy = 1 + Math.ceil((wThur.getTime() - YThur.getTime()) / later.WEEK));","  },","","  /**","  * Returns true if the val is valid for the date specified.","  *","  * @param {Date} d: The date to check the value on","  * @param {Integer} val: The value to validate","  */","  isValid: function(d, val) {","    return later.wy.val(d) === (val || later.wy.extent(d)[1]);","  },","","  /**","  * The minimum and maximum valid ISO week values for the year indicated.","  *","  * @param {Date} d: The date indicating the year to find ISO values for","  */","  extent: function(d) {","    if (d.wyExtent) return d.wyExtent;","","    // go to start of ISO week to get to the right year","    var year = later.dw.next(later.wy.start(d), 5),","        dwFirst = later.dw.val(later.Y.start(year)),","        dwLast = later.dw.val(later.Y.end(year));","","    return (d.wyExtent = [1, dwFirst === 5 || dwLast === 5 ? 53 : 52]);","  },","","  /**","  * The start of the ISO week of the specified date.","  *","  * @param {Date} d: The specified date","  */","  start: function(d) {","    return d.wyStart || (d.wyStart = later.date.next(","      later.Y.val(d),","      later.M.val(d),","      // jump to the Monday of the current week","      later.D.val(d) - (later.dw.val(d) &gt; 1 ? later.dw.val(d) - 2 : 6)","    ));","  },","","  /**","  * The end of the ISO week of the specified date.","  *","  * @param {Date} d: The specified date","  */","  end: function(d) {","    return d.wyEnd || (d.wyEnd = later.date.prev(","      later.Y.val(d),","      later.M.val(d),","      // jump to the Saturday of the current week","      later.D.val(d) + (later.dw.val(d) &gt; 1 ? 8 - later.dw.val(d) : 0)","    ));","  },","","  /**","  * Returns the start of the next instance of the ISO week value indicated.","  *","  * @param {Date} d: The starting date","  * @param {int} val: The desired value, must be within extent","  */","  next: function(d, val) {","    val = val &gt; later.wy.extent(d)[1] ? 1 : val;","","    var wyThur = later.dw.next(later.wy.start(d), 5),","        year = later.date.nextRollover(wyThur, val, later.wy, later.Y);","","    // handle case where 1st of year is last week of previous month","    if(later.wy.val(year) !== 1) {","      year = later.dw.next(year, 2);","    }","","    var wyMax = later.wy.extent(year)[1],","        wyStart = later.wy.start(year);","","    val = val &gt; wyMax ? 1 : val || wyMax;","","    return later.date.next(","        later.Y.val(wyStart),","        later.M.val(wyStart),","        later.D.val(wyStart) + 7 * (val-1)","      );","  },","","  /**","  * Returns the end of the previous instance of the ISO week value indicated.","  *","  * @param {Date} d: The starting date","  * @param {int} val: The desired value, must be within extent","  */","  prev: function(d, val) {","    var wyThur = later.dw.next(later.wy.start(d), 5),","        year = later.date.prevRollover(wyThur, val, later.wy, later.Y);","","    // handle case where 1st of year is last week of previous month","    if(later.wy.val(year) !== 1) {","      year = later.dw.next(year, 2);","    }","","    var wyMax = later.wy.extent(year)[1],","        wyEnd = later.wy.end(year);","","    val = val &gt; wyMax ? wyMax : val || wyMax;","","    return later.wy.end(later.date.next(","        later.Y.val(wyEnd),","        later.M.val(wyEnd),","        later.D.val(wyEnd) + 7 * (val-1)","      ));","  }","};"];
_$jscoverage['constraint/weekofyear.js'][12]++;
later.weekOfYear = (later.wy = {name: "week of year (ISO)", range: 604800, val: (function (d) {
  _$jscoverage['constraint/weekofyear.js'][31]++;
  if (d.wy) {
    _$jscoverage['constraint/weekofyear.js'][31]++;
    return d.wy;
  }
  _$jscoverage['constraint/weekofyear.js'][34]++;
  var wThur = later.dw.next(later.wy.start(d), 5), YThur = later.dw.next(later.Y.prev(wThur, (later.Y.val(wThur) - 1)), 5);
  _$jscoverage['constraint/weekofyear.js'][38]++;
  return (d.wy = (1 + Math.ceil(((wThur.getTime() - YThur.getTime()) / later.WEEK))));
}), isValid: (function (d, val) {
  _$jscoverage['constraint/weekofyear.js'][48]++;
  return (later.wy.val(d) === (val || later.wy.extent(d)[1]));
}), extent: (function (d) {
  _$jscoverage['constraint/weekofyear.js'][57]++;
  if (d.wyExtent) {
    _$jscoverage['constraint/weekofyear.js'][57]++;
    return d.wyExtent;
  }
  _$jscoverage['constraint/weekofyear.js'][60]++;
  var year = later.dw.next(later.wy.start(d), 5), dwFirst = later.dw.val(later.Y.start(year)), dwLast = later.dw.val(later.Y.end(year));
  _$jscoverage['constraint/weekofyear.js'][64]++;
  return (d.wyExtent = [1, (((dwFirst === 5) || (dwLast === 5))? 53: 52)]);
}), start: (function (d) {
  _$jscoverage['constraint/weekofyear.js'][73]++;
  return (d.wyStart || (d.wyStart = later.date.next(later.Y.val(d), later.M.val(d), (later.D.val(d) - ((later.dw.val(d) > 1)? (later.dw.val(d) - 2): 6)))));
}), end: (function (d) {
  _$jscoverage['constraint/weekofyear.js'][87]++;
  return (d.wyEnd || (d.wyEnd = later.date.prev(later.Y.val(d), later.M.val(d), (later.D.val(d) + ((later.dw.val(d) > 1)? (8 - later.dw.val(d)): 0)))));
}), next: (function (d, val) {
  _$jscoverage['constraint/weekofyear.js'][102]++;
  val = ((val > later.wy.extent(d)[1])? 1: val);
  _$jscoverage['constraint/weekofyear.js'][104]++;
  var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.nextRollover(wyThur, val, later.wy, later.Y);
  _$jscoverage['constraint/weekofyear.js'][108]++;
  if ((later.wy.val(year) !== 1)) {
    _$jscoverage['constraint/weekofyear.js'][109]++;
    year = later.dw.next(year, 2);
  }
  _$jscoverage['constraint/weekofyear.js'][112]++;
  var wyMax = later.wy.extent(year)[1], wyStart = later.wy.start(year);
  _$jscoverage['constraint/weekofyear.js'][115]++;
  val = ((val > wyMax)? 1: (val || wyMax));
  _$jscoverage['constraint/weekofyear.js'][117]++;
  return later.date.next(later.Y.val(wyStart), later.M.val(wyStart), (later.D.val(wyStart) + (7 * (val - 1))));
}), prev: (function (d, val) {
  _$jscoverage['constraint/weekofyear.js'][131]++;
  var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.prevRollover(wyThur, val, later.wy, later.Y);
  _$jscoverage['constraint/weekofyear.js'][135]++;
  if ((later.wy.val(year) !== 1)) {
    _$jscoverage['constraint/weekofyear.js'][136]++;
    year = later.dw.next(year, 2);
  }
  _$jscoverage['constraint/weekofyear.js'][139]++;
  var wyMax = later.wy.extent(year)[1], wyEnd = later.wy.end(year);
  _$jscoverage['constraint/weekofyear.js'][142]++;
  val = ((val > wyMax)? wyMax: (val || wyMax));
  _$jscoverage['constraint/weekofyear.js'][144]++;
  return later.wy.end(later.date.next(later.Y.val(wyEnd), later.M.val(wyEnd), (later.D.val(wyEnd) + (7 * (val - 1)))));
})});
