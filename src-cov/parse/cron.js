/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['parse/cron.js']) {
  _$jscoverage['parse/cron.js'] = [];
  _$jscoverage['parse/cron.js'][6] = 0;
  _$jscoverage['parse/cron.js'][9] = 0;
  _$jscoverage['parse/cron.js'][16] = 0;
  _$jscoverage['parse/cron.js'][34] = 0;
  _$jscoverage['parse/cron.js'][35] = 0;
  _$jscoverage['parse/cron.js'][44] = 0;
  _$jscoverage['parse/cron.js'][45] = 0;
  _$jscoverage['parse/cron.js'][47] = 0;
  _$jscoverage['parse/cron.js'][48] = 0;
  _$jscoverage['parse/cron.js'][49] = 0;
  _$jscoverage['parse/cron.js'][53] = 0;
  _$jscoverage['parse/cron.js'][65] = 0;
  _$jscoverage['parse/cron.js'][66] = 0;
  _$jscoverage['parse/cron.js'][68] = 0;
  _$jscoverage['parse/cron.js'][69] = 0;
  _$jscoverage['parse/cron.js'][72] = 0;
  _$jscoverage['parse/cron.js'][73] = 0;
  _$jscoverage['parse/cron.js'][74] = 0;
  _$jscoverage['parse/cron.js'][76] = 0;
  _$jscoverage['parse/cron.js'][88] = 0;
  _$jscoverage['parse/cron.js'][92] = 0;
  _$jscoverage['parse/cron.js'][94] = 0;
  _$jscoverage['parse/cron.js'][95] = 0;
  _$jscoverage['parse/cron.js'][98] = 0;
  _$jscoverage['parse/cron.js'][99] = 0;
  _$jscoverage['parse/cron.js'][102] = 0;
  _$jscoverage['parse/cron.js'][103] = 0;
  _$jscoverage['parse/cron.js'][104] = 0;
  _$jscoverage['parse/cron.js'][107] = 0;
  _$jscoverage['parse/cron.js'][108] = 0;
  _$jscoverage['parse/cron.js'][109] = 0;
  _$jscoverage['parse/cron.js'][110] = 0;
  _$jscoverage['parse/cron.js'][111] = 0;
  _$jscoverage['parse/cron.js'][112] = 0;
  _$jscoverage['parse/cron.js'][117] = 0;
  _$jscoverage['parse/cron.js'][118] = 0;
  _$jscoverage['parse/cron.js'][119] = 0;
  _$jscoverage['parse/cron.js'][120] = 0;
  _$jscoverage['parse/cron.js'][121] = 0;
  _$jscoverage['parse/cron.js'][122] = 0;
  _$jscoverage['parse/cron.js'][124] = 0;
  _$jscoverage['parse/cron.js'][125] = 0;
  _$jscoverage['parse/cron.js'][138] = 0;
  _$jscoverage['parse/cron.js'][140] = 0;
  _$jscoverage['parse/cron.js'][145] = 0;
  _$jscoverage['parse/cron.js'][146] = 0;
  _$jscoverage['parse/cron.js'][147] = 0;
  _$jscoverage['parse/cron.js'][148] = 0;
  _$jscoverage['parse/cron.js'][150] = 0;
  _$jscoverage['parse/cron.js'][163] = 0;
  _$jscoverage['parse/cron.js'][164] = 0;
  _$jscoverage['parse/cron.js'][170] = 0;
  _$jscoverage['parse/cron.js'][171] = 0;
  _$jscoverage['parse/cron.js'][175] = 0;
  _$jscoverage['parse/cron.js'][176] = 0;
  _$jscoverage['parse/cron.js'][179] = 0;
  _$jscoverage['parse/cron.js'][180] = 0;
  _$jscoverage['parse/cron.js'][183] = 0;
  _$jscoverage['parse/cron.js'][184] = 0;
  _$jscoverage['parse/cron.js'][187] = 0;
  _$jscoverage['parse/cron.js'][188] = 0;
  _$jscoverage['parse/cron.js'][189] = 0;
  _$jscoverage['parse/cron.js'][193] = 0;
  _$jscoverage['parse/cron.js'][202] = 0;
  _$jscoverage['parse/cron.js'][203] = 0;
  _$jscoverage['parse/cron.js'][207] = 0;
  _$jscoverage['parse/cron.js'][208] = 0;
  _$jscoverage['parse/cron.js'][217] = 0;
  _$jscoverage['parse/cron.js'][218] = 0;
  _$jscoverage['parse/cron.js'][222] = 0;
  _$jscoverage['parse/cron.js'][223] = 0;
  _$jscoverage['parse/cron.js'][224] = 0;
  _$jscoverage['parse/cron.js'][225] = 0;
  _$jscoverage['parse/cron.js'][229] = 0;
  _$jscoverage['parse/cron.js'][230] = 0;
  _$jscoverage['parse/cron.js'][231] = 0;
  _$jscoverage['parse/cron.js'][232] = 0;
  _$jscoverage['parse/cron.js'][237] = 0;
  _$jscoverage['parse/cron.js'][240] = 0;
  _$jscoverage['parse/cron.js'][253] = 0;
  _$jscoverage['parse/cron.js'][254] = 0;
}
_$jscoverage['parse/cron.js'].source = ["/**","* Parses a cron expression and produces a schedule that is compatible","* with Later.js.  See http://en.wikipedia.org/wiki/Cron for details of","* the cron format.","*/","later.parse.cron = function () {","","  // Constant array to convert valid names to values","  var NAMES = {","    JAN: 1, FEB: 2, MAR: 3, APR: 4, MAY: 5, JUN: 6, JUL: 7, AUG: 8,","    SEP: 9, OCT: 10, NOV: 11, DEC: 12,","    SUN: 1, MON: 2, TUE: 3, WED: 4, THU: 5, FRI: 6, SAT: 7","  };","","  // Contains the index, min, and max for each of the constraints","  var FIELDS = {","    s: [0, 0, 59],      // seconds","    m: [1, 0, 59],      // minutes","    h: [2, 0, 23],      // hours","    D: [3, 1, 31],      // day of month","    M: [4, 1, 12],      // month","    Y: [6, 1970, 2099], // year","    d: [5, 1, 7, 1]     // day of week","  };","","  /**","  * Returns the value + offset if value is a number, otherwise it","  * attempts to look up the value in the NAMES table and returns","  * that result instead.","  *","  * @param {Int,String} value: The value that should be parsed","  * @param {Int} offset: Any offset that must be added to the value","  */","  function getValue(value, offset) {","    return isNaN(value) ? NAMES[value] || null : +value + (offset || 0);","  }","","  /**","  * Returns a deep clone of a schedule skipping any day of week","  * constraints.","  *","  * @param {Sched} sched: The schedule that will be cloned","  */","  function cloneSchedule(sched) {","    var clone = {}, field;","","    for(field in sched) {","      if (field !== 'dc' &amp;&amp; field !== 'd') {","        clone[field] = sched[field].slice(0);","      }","    }","","    return clone;","  }","","  /**","  * Adds values to the specified constraint in the current schedule.","  *","  * @param {Sched} sched: The schedule to add the constraint to","  * @param {String} name: Name of constraint to add","  * @param {Int} min: Minimum value for this constraint","  * @param {Int} max: Maximum value for this constraint","  * @param {Int} inc: The increment to use between min and max","  */","  function add(sched, name, min, max, inc) {","    var i = min;","","    if (!sched[name]) {","      sched[name] = [];","    }","","    while (i &lt;= max) {","      if (sched[name].indexOf(i) &lt; 0) {","        sched[name].push(i);","      }","      i += inc || 1;","    }","  }","","  /**","  * Adds a hash item (of the form x#y or xL) to the schedule.","  *","  * @param {Schedule} schedules: The current schedule array to add to","  * @param {Schedule} curSched: The current schedule to add to","  * @param {Int} value: The value to add (x of x#y or xL)","  * @param {Int} hash: The hash value to add (y of x#y)","  */","  function addHash(schedules, curSched, value, hash) {","    // if there are any existing day of week constraints that","    // aren't equal to the one we're adding, create a new","    // composite schedule","    if ((curSched.d &amp;&amp; !curSched.dc) ||","        (curSched.dc &amp;&amp; curSched.dc.indexOf(hash) &lt; 0)) {","      schedules.push(cloneSchedule(curSched));","      curSched = schedules[schedules.length-1];","    }","","    add(curSched, 'd', value, value);","    add(curSched, 'dc', hash, hash);","  }","","  function addWeekday(s, curSched, value) {","     var except1 = {}, except2 = {};","     if (value=== 1) {","      // cron doesn't pass month boundaries, so if 1st is a","      // weekend then we need to use 2nd or 3rd instead","      add(curSched, 'D', 1, 3);","      add(curSched, 'd', NAMES.MON, NAMES.FRI);","      add(except1, 'D', 2, 2);","      add(except1, 'd', NAMES.TUE, NAMES.FRI);","      add(except2, 'D', 3, 3);","      add(except2, 'd', NAMES.TUE, NAMES.FRI);","    } else {","      // normally you want the closest day, so if v is a","      // Saturday, use the previous Friday.  If it's a","      // sunday, use the following Monday.","      add(curSched, 'D', value-1, value+1);","      add(curSched, 'd', NAMES.MON, NAMES.FRI);","      add(except1, 'D', value-1, value-1);","      add(except1, 'd', NAMES.MON, NAMES.THU);","      add(except2, 'D', value+1, value+1);","      add(except2, 'd', NAMES.TUE, NAMES.FRI);","    }","    s.exceptions.push(except1);","    s.exceptions.push(except2);","  }","","  /**","  * Adds a range item (of the form x-y/z) to the schedule.","  *","  * @param {String} item: The cron expression item to add","  * @param {Schedule} curSched: The current schedule to add to","  * @param {String} name: The name to use for this constraint","  * @param {Int} min: The min value for the constraint","  * @param {Int} max: The max value for the constraint","  * @param {Int} offset: The offset to apply to the cron value","  */","  function addRange(item, curSched, name, min, max, offset) {","    // parse range/x","    var incSplit = item.split('/'),","        inc = +incSplit[1],","        range = incSplit[0];","","    // parse x-y or * or 0","    if (range !== '*' &amp;&amp; range !== '0') {","      var rangeSplit = range.split('-');","      min = getValue(rangeSplit[0], offset);","      max = getValue(rangeSplit[1], offset);","    }","    add(curSched, name, min, max, inc);","  }","","  /**","  * Parses a particular item within a cron expression.","  *","  * @param {String} item: The cron expression item to parse","  * @param {Schedule} s: The existing set of schedules","  * @param {String} name: The name to use for this constraint","  * @param {Int} min: The min value for the constraint","  * @param {Int} max: The max value for the constraint","  * @param {Int} offset: The offset to apply to the cron value","  */","  function parse(item, s, name, min, max, offset) {","    var value,","        split,","        schedules = s.schedules,","        curSched = schedules[schedules.length-1];","","    // L just means min - 1 (this also makes it work for any field)","    if (item === 'L') {","      item = min - 1;","    }","","    // parse x","    if ((value = getValue(item, offset)) !== null) {","      add(curSched, name, value, value);","    }","    // parse xW","    else if ((value = getValue(item.replace('W', ''), offset)) !== null) {","      addWeekday(s, curSched, value);","    }","    // parse xL","    else if ((value = getValue(item.replace('L', ''), offset)) !== null) {","      addHash(schedules, curSched, value, min-1);","    }","    // parse x#y","    else if ((split = item.split('#')).length === 2) {","      value = getValue(split[0], offset);","      addHash(schedules, curSched, value, getValue(split[1]));","    }","    // parse x-y or x-y/z or */z or 0/z","    else {","      addRange(item, curSched, name, min, max, offset);","    }","  }","","  /**","  * Returns true if the item is either of the form x#y or xL.","  *","  * @param {String} item: The expression item to check","  */","  function isHash(item) {","    return item.indexOf('#') &gt; -1 || item.indexOf('L') &gt; 0;","  }","","","  function itemSorter(a,b) {","    return isHash(a) &amp;&amp; !isHash(b) ? 1 : 0;","  }","","  /**","  * Parses each of the fields in a cron expression.  The expression must","  * include the seconds field, the year field is optional.","  *","  * @param {String} expr: The cron expression to parse","  */","  function parseExpr(expr) {","    var schedule = {schedules: [{}], exceptions: []},","        components = expr.split(' '),","        field, f, component, items;","","    for(field in FIELDS) {","      f = FIELDS[field];","      component = components[f[0]];","      if (component &amp;&amp; component !== '*' &amp;&amp; component !== '?') {","        // need to sort so that any #'s come last, otherwise","        // schedule clones to handle # won't contain all of the","        // other constraints","        items = component.split(',').sort(itemSorter);","        var i, length = items.length;","        for (i = 0; i &lt; length; i++) {","          parse(items[i], schedule, field, f[1], f[2], f[3]);","        }","      }","    }","","    return schedule;","  }","","  return {","","    /**","    * Parses a valid cron expression and produces a valid schedule that","    * can then be used with Later.","    *","    * CronParser().parse('* 5 * * * * *', true);","    *","    * @param {String} expr: The cron expression to parse","    * @param {Bool} hasSeconds: True if the expression uses a seconds field","    * @api public","    */","    parse: function (expr, hasSeconds) {","      var e = expr.toUpperCase();","      return parseExpr(hasSeconds ? e : '0 ' + e);","    }","","  };","};"];
_$jscoverage['parse/cron.js'][6]++;
later.parse.cron = (function () {
  _$jscoverage['parse/cron.js'][9]++;
  var NAMES = {JAN: 1, FEB: 2, MAR: 3, APR: 4, MAY: 5, JUN: 6, JUL: 7, AUG: 8, SEP: 9, OCT: 10, NOV: 11, DEC: 12, SUN: 1, MON: 2, TUE: 3, WED: 4, THU: 5, FRI: 6, SAT: 7};
  _$jscoverage['parse/cron.js'][16]++;
  var FIELDS = {s: [0, 0, 59], m: [1, 0, 59], h: [2, 0, 23], D: [3, 1, 31], M: [4, 1, 12], Y: [6, 1970, 2099], d: [5, 1, 7, 1]};
  _$jscoverage['parse/cron.js'][34]++;
  function getValue(value, offset) {
    _$jscoverage['parse/cron.js'][35]++;
    return (isNaN(value)? (NAMES[value] || null): ((+ value) + (offset || 0)));
}
  _$jscoverage['parse/cron.js'][44]++;
  function cloneSchedule(sched) {
    _$jscoverage['parse/cron.js'][45]++;
    var clone = {}, field;
    _$jscoverage['parse/cron.js'][47]++;
    for (field in sched) {
      _$jscoverage['parse/cron.js'][48]++;
      if (((field !== "dc") && (field !== "d"))) {
        _$jscoverage['parse/cron.js'][49]++;
        clone[field] = sched[field].slice(0);
      }
}
    _$jscoverage['parse/cron.js'][53]++;
    return clone;
}
  _$jscoverage['parse/cron.js'][65]++;
  function add(sched, name, min, max, inc) {
    _$jscoverage['parse/cron.js'][66]++;
    var i = min;
    _$jscoverage['parse/cron.js'][68]++;
    if ((! sched[name])) {
      _$jscoverage['parse/cron.js'][69]++;
      sched[name] = [];
    }
    _$jscoverage['parse/cron.js'][72]++;
    while ((i <= max)) {
      _$jscoverage['parse/cron.js'][73]++;
      if ((sched[name].indexOf(i) < 0)) {
        _$jscoverage['parse/cron.js'][74]++;
        sched[name].push(i);
      }
      _$jscoverage['parse/cron.js'][76]++;
      i += (inc || 1);
}
}
  _$jscoverage['parse/cron.js'][88]++;
  function addHash(schedules, curSched, value, hash) {
    _$jscoverage['parse/cron.js'][92]++;
    if (((curSched.d && (! curSched.dc)) || (curSched.dc && (curSched.dc.indexOf(hash) < 0)))) {
      _$jscoverage['parse/cron.js'][94]++;
      schedules.push(cloneSchedule(curSched));
      _$jscoverage['parse/cron.js'][95]++;
      curSched = schedules[(schedules.length - 1)];
    }
    _$jscoverage['parse/cron.js'][98]++;
    add(curSched, "d", value, value);
    _$jscoverage['parse/cron.js'][99]++;
    add(curSched, "dc", hash, hash);
}
  _$jscoverage['parse/cron.js'][102]++;
  function addWeekday(s, curSched, value) {
    _$jscoverage['parse/cron.js'][103]++;
    var except1 = {}, except2 = {};
    _$jscoverage['parse/cron.js'][104]++;
    if ((value === 1)) {
      _$jscoverage['parse/cron.js'][107]++;
      add(curSched, "D", 1, 3);
      _$jscoverage['parse/cron.js'][108]++;
      add(curSched, "d", NAMES.MON, NAMES.FRI);
      _$jscoverage['parse/cron.js'][109]++;
      add(except1, "D", 2, 2);
      _$jscoverage['parse/cron.js'][110]++;
      add(except1, "d", NAMES.TUE, NAMES.FRI);
      _$jscoverage['parse/cron.js'][111]++;
      add(except2, "D", 3, 3);
      _$jscoverage['parse/cron.js'][112]++;
      add(except2, "d", NAMES.TUE, NAMES.FRI);
    }
    else {
      _$jscoverage['parse/cron.js'][117]++;
      add(curSched, "D", (value - 1), (value + 1));
      _$jscoverage['parse/cron.js'][118]++;
      add(curSched, "d", NAMES.MON, NAMES.FRI);
      _$jscoverage['parse/cron.js'][119]++;
      add(except1, "D", (value - 1), (value - 1));
      _$jscoverage['parse/cron.js'][120]++;
      add(except1, "d", NAMES.MON, NAMES.THU);
      _$jscoverage['parse/cron.js'][121]++;
      add(except2, "D", (value + 1), (value + 1));
      _$jscoverage['parse/cron.js'][122]++;
      add(except2, "d", NAMES.TUE, NAMES.FRI);
    }
    _$jscoverage['parse/cron.js'][124]++;
    s.exceptions.push(except1);
    _$jscoverage['parse/cron.js'][125]++;
    s.exceptions.push(except2);
}
  _$jscoverage['parse/cron.js'][138]++;
  function addRange(item, curSched, name, min, max, offset) {
    _$jscoverage['parse/cron.js'][140]++;
    var incSplit = item.split("/"), inc = (+ incSplit[1]), range = incSplit[0];
    _$jscoverage['parse/cron.js'][145]++;
    if (((range !== "*") && (range !== "0"))) {
      _$jscoverage['parse/cron.js'][146]++;
      var rangeSplit = range.split("-");
      _$jscoverage['parse/cron.js'][147]++;
      min = getValue(rangeSplit[0], offset);
      _$jscoverage['parse/cron.js'][148]++;
      max = getValue(rangeSplit[1], offset);
    }
    _$jscoverage['parse/cron.js'][150]++;
    add(curSched, name, min, max, inc);
}
  _$jscoverage['parse/cron.js'][163]++;
  function parse(item, s, name, min, max, offset) {
    _$jscoverage['parse/cron.js'][164]++;
    var value, split, schedules = s.schedules, curSched = schedules[(schedules.length - 1)];
    _$jscoverage['parse/cron.js'][170]++;
    if ((item === "L")) {
      _$jscoverage['parse/cron.js'][171]++;
      item = (min - 1);
    }
    _$jscoverage['parse/cron.js'][175]++;
    if (((value = getValue(item, offset)) !== null)) {
      _$jscoverage['parse/cron.js'][176]++;
      add(curSched, name, value, value);
    }
    else {
      _$jscoverage['parse/cron.js'][179]++;
      if (((value = getValue(item.replace("W", ""), offset)) !== null)) {
        _$jscoverage['parse/cron.js'][180]++;
        addWeekday(s, curSched, value);
      }
      else {
        _$jscoverage['parse/cron.js'][183]++;
        if (((value = getValue(item.replace("L", ""), offset)) !== null)) {
          _$jscoverage['parse/cron.js'][184]++;
          addHash(schedules, curSched, value, (min - 1));
        }
        else {
          _$jscoverage['parse/cron.js'][187]++;
          if (((split = item.split("#")).length === 2)) {
            _$jscoverage['parse/cron.js'][188]++;
            value = getValue(split[0], offset);
            _$jscoverage['parse/cron.js'][189]++;
            addHash(schedules, curSched, value, getValue(split[1]));
          }
          else {
            _$jscoverage['parse/cron.js'][193]++;
            addRange(item, curSched, name, min, max, offset);
          }
        }
      }
    }
}
  _$jscoverage['parse/cron.js'][202]++;
  function isHash(item) {
    _$jscoverage['parse/cron.js'][203]++;
    return ((item.indexOf("#") > -1) || (item.indexOf("L") > 0));
}
  _$jscoverage['parse/cron.js'][207]++;
  function itemSorter(a, b) {
    _$jscoverage['parse/cron.js'][208]++;
    return ((isHash(a) && (! isHash(b)))? 1: 0);
}
  _$jscoverage['parse/cron.js'][217]++;
  function parseExpr(expr) {
    _$jscoverage['parse/cron.js'][218]++;
    var schedule = {schedules: [{}], exceptions: []}, components = expr.split(" "), field, f, component, items;
    _$jscoverage['parse/cron.js'][222]++;
    for (field in FIELDS) {
      _$jscoverage['parse/cron.js'][223]++;
      f = FIELDS[field];
      _$jscoverage['parse/cron.js'][224]++;
      component = components[f[0]];
      _$jscoverage['parse/cron.js'][225]++;
      if ((component && (component !== "*") && (component !== "?"))) {
        _$jscoverage['parse/cron.js'][229]++;
        items = component.split(",").sort(itemSorter);
        _$jscoverage['parse/cron.js'][230]++;
        var i, length = items.length;
        _$jscoverage['parse/cron.js'][231]++;
        for (i = 0; (i < length); (i++)) {
          _$jscoverage['parse/cron.js'][232]++;
          parse(items[i], schedule, field, f[1], f[2], f[3]);
}
      }
}
    _$jscoverage['parse/cron.js'][237]++;
    return schedule;
}
  _$jscoverage['parse/cron.js'][240]++;
  return ({parse: (function (expr, hasSeconds) {
  _$jscoverage['parse/cron.js'][253]++;
  var e = expr.toUpperCase();
  _$jscoverage['parse/cron.js'][254]++;
  return parseExpr((hasSeconds? e: ("0 " + e)));
})});
});
