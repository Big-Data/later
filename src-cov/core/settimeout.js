/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['core/settimeout.js']) {
  _$jscoverage['core/settimeout.js'] = [];
  _$jscoverage['core/settimeout.js'][13] = 0;
  _$jscoverage['core/settimeout.js'][15] = 0;
  _$jscoverage['core/settimeout.js'][16] = 0;
  _$jscoverage['core/settimeout.js'][23] = 0;
  _$jscoverage['core/settimeout.js'][24] = 0;
  _$jscoverage['core/settimeout.js'][29] = 0;
  _$jscoverage['core/settimeout.js'][30] = 0;
  _$jscoverage['core/settimeout.js'][33] = 0;
  _$jscoverage['core/settimeout.js'][34] = 0;
  _$jscoverage['core/settimeout.js'][37] = 0;
  _$jscoverage['core/settimeout.js'][41] = 0;
  _$jscoverage['core/settimeout.js'][47] = 0;
}
_$jscoverage['core/settimeout.js'].source = ["/**","* Set Timeout","* (c) 2013 Bill, BunKat LLC.","*","* Works similar to setTimeout() but allows you to specify a Later schedule","* instead of milliseconds.","*","* Later is freely distributable under the MIT license.","* For all details and documentation:","*     http://github.com/bunkat/later","*/","","later.setTimeout = function(fn, sched) {","","  var s = later.schedule(sched), t;","  scheduleTimeout();","","  /**","  * Schedules the timeout to occur. If the next occurrence is greater than the","  * max supported delay (2147483647 ms) than we delay for that amount before","  * attempting to schedule the timeout again.","  */","  function scheduleTimeout() {","    var now = Date.now(),","        next = s.next(2, now),","        diff = next[0].getTime() - now;","","    // minimum time to fire is one second, use next occurrence instead","    if(diff &lt; 1000) {","      diff = next[1].getTime() - now;","    }","","    if(diff &lt; 2147483647) {","      t = setTimeout(fn, diff);","    }","    else {","      t = setTimeout(scheduleTimeout, 2147483647);","    }","  }","","  return {","","    /**","    * Clears the timeout.","    */","    clear: function() {","      clearTimeout(t);","    }","","  };","","};"];
_$jscoverage['core/settimeout.js'][13]++;
later.setTimeout = (function (fn, sched) {
  _$jscoverage['core/settimeout.js'][15]++;
  var s = later.schedule(sched), t;
  _$jscoverage['core/settimeout.js'][16]++;
  scheduleTimeout();
  _$jscoverage['core/settimeout.js'][23]++;
  function scheduleTimeout() {
    _$jscoverage['core/settimeout.js'][24]++;
    var now = Date.now(), next = s.next(2, now), diff = (next[0].getTime() - now);
    _$jscoverage['core/settimeout.js'][29]++;
    if ((diff < 1000)) {
      _$jscoverage['core/settimeout.js'][30]++;
      diff = (next[1].getTime() - now);
    }
    _$jscoverage['core/settimeout.js'][33]++;
    if ((diff < 2147483647)) {
      _$jscoverage['core/settimeout.js'][34]++;
      t = setTimeout(fn, diff);
    }
    else {
      _$jscoverage['core/settimeout.js'][37]++;
      t = setTimeout(scheduleTimeout, 2147483647);
    }
}
  _$jscoverage['core/settimeout.js'][41]++;
  return ({clear: (function () {
  _$jscoverage['core/settimeout.js'][47]++;
  clearTimeout(t);
})});
});
